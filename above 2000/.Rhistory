setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/raw data")
KNN <- function(data, year){
if(length(which(is.na(data[,year]))) == 0) return(data[,c(1,2, year)])
na.row <- which(is.na(data[, year])) #기준 년도에서 NA인 row추출
for(i in 1:length(na.row)){
col <- !is.na(data[na.row[i],]) #key observation에서 NA가 아닌 col 추출
collected.col <- data[, col] #data에서 col column들을 추출
key <- collected.col[na.row[i],] #key observation의 row 추출
index <- complete.cases(collected.col) #NA가 하나도 없는 row 추출
non.na <- collected.col[index,] #NA를 제거함.
a <- apply(as.data.frame(non.na[,-c(1,2)]), 1, "-", key[,-c(1,2)]) #두 값의 차
b <- unlist(a) ^ 2 #차의 제곱
c <- as.data.frame(matrix(b, length(b)/(length(collected.col)-2),
length(collected.col)-2, byrow = T)) #vector b를 data.frame으로 형변환
colnames(c) <- colnames(non.na)[-c(1, 2)]
p.length <- apply(c, 1, sum) #각 년도별로 구해진 길이들의 합
o.p <- order(p.length) #길이들의 합을 최소 순서로 배열
n.point <- o.p[which(!is.na(data[o.p, year]))][1:5] #year 칼럼에 NA가 아닌 것들 중에서 작은거 5개
d <- data[n.point, year] #key와 가까운 5개의 point의 점수 추출
data[na.row[i], year] <- mean(d, na.rm = T) # 추출된 근처 값들의 평균을 넣어줌.
}
return(data[,c(1, 2, year)])
}
life <- read.csv("life.rm.csv")
life.0 <- KNN(life, 18)
setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/above 2000")
KNN <- function(data, year){
if(length(which(is.na(data[,year]))) == 0) return(data[,c(1,2, year)])
na.row <- which(is.na(data[, year])) #기준 년도에서 NA인 row추출
for(i in 1:length(na.row)){
col <- !is.na(data[na.row[i],]) #key observation에서 NA가 아닌 col 추출
collected.col <- data[, col] #data에서 col column들을 추출
key <- collected.col[na.row[i],] #key observation의 row 추출
index <- complete.cases(collected.col) #NA가 하나도 없는 row 추출
non.na <- collected.col[index,] #NA를 제거함.
a <- apply(as.data.frame(non.na[,-c(1,2)]), 1, "-", key[,-c(1,2)]) #두 값의 차
b <- unlist(a) ^ 2 #차의 제곱
c <- as.data.frame(matrix(b, length(b)/(length(collected.col)-2),
length(collected.col)-2, byrow = T)) #vector b를 data.frame으로 형변환
colnames(c) <- colnames(non.na)[-c(1, 2)]
p.length <- apply(c, 1, sum) #각 년도별로 구해진 길이들의 합
o.p <- order(p.length) #길이들의 합을 최소 순서로 배열
n.point <- o.p[which(!is.na(data[o.p, year]))][1:5] #year 칼럼에 NA가 아닌 것들 중에서 작은거 5개
d <- data[n.point, year] #key와 가까운 5개의 point의 점수 추출
data[na.row[i], year] <- mean(d, na.rm = T) # 추출된 근처 값들의 평균을 넣어줌.
}
return(data[,c(1, 2, year)])
}
life <- read.csv("life.rm.csv")
life.0 <- KNN(life, 18)
gdp <- read.csv("gdp.rm.csv")
gdp.0 <- KNN(gdp, 19)
co2 <- read.csv("co2.rm.csv")
co2.0 <- KNN(co2, 17)
ter <- read.csv("ter.rm.csv")
ter.0 <- KNN(ter, 18)
smo <- read.csv("smo.rm.2.CSV")
which(is.na(smo[,3]))
which(is.na(smo[,4]))
avg <- apply(smo[,c(3,4)], 2, mean, na.rm = T)
smo[which(is.na(smo[,3])),3] <- avg[1]
smo[which(is.na(smo[,4])),4] <- avg[2]
sec <- read.csv("sec.rm.csv")
sec.0 <- KNN(sec, 18)
obesity <- read.csv("Obesity.rm.csv", header=T)
KNN(obesity, 19)
obs.0 <- obesity[,c(1, 2, 19)]
hiv <- read.csv("hiv.rm.csv")
hiv.0 <- KNN(hiv, 19)
hiv <- read.csv("hiv2.raw.data.csv")
hiv.0 <- KNN(hiv, 17)
pre <- read.csv("pre.rm.csv")
pre.0 <- KNN(pre, 18)
pri <- read.csv("pri.rm.csv")
pri.0 <- KNN(pri, 18)
sani <- read.csv("sani.rm.csv")
sani.0 <- KNN(sani, 18)
write.csv(co2.0, "co2.rv.csv", row.names = F)
write.csv(gdp.0, "gdp.rv.csv", row.names = F)
write.csv(hiv.0, "hiv.rv.csv", row.names = F)
write.csv(life.0, "life.rv.csv", row.names = F)
write.csv(obs.0, "ob.rv.csv", row.names = F)
write.csv(pre.0, "pre.rv.csv", row.names = F)
write.csv(pri.0, "pri.rv.csv", row.names = F)
write.csv(sani.0, "sani.rv.csv", row.names = F)
write.csv(smo, "smo.rv.csv", row.names = F)
write.csv(sec.0, "sec.rv.csv", row.names = F)
write.csv(ter.0, "ter.rv.csv", row.names = F)
setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/above 2000")
co2 <- read.csv("co2.rv.csv")
gdp <- read.csv("gdp.rv.csv")
hiv <- read.csv("hiv.rv.csv")
life <- read.csv("life.rv.csv")
ob <- read.csv("ob.rv.csv")
pre <- read.csv("pre.rv.csv")
pri <- read.csv("pri.rv.csv")
sani <- read.csv("sani.rv.csv")
sec <- read.csv("sec.rv.csv")
smo <- read.csv("smo.rv.csv")
ter <- read.csv("ter.rv.csv")
al <- read.csv("al.rv.csv")
al <- read.csv("al.rv.csv")
co2 <- co2[order(co2$Country.Code),]
gdp <- gdp[order(gdp$Country.Code),]
hiv <- hiv[order(hiv$Country.Code),]
life <- life[order(life$Country.Code),]
pre <- pre[order(pre$Country.Code),]
pri <- pri[order(pri$Country.Code),]
ob <- ob[order(ob$Country.Code),]
sec <- sec[order(sec$Country.Code),]
sani <- sani[order(sani$Country.Code),]
smo <- smo[order(smo$Country.Code),]
ter <- ter[order(ter$Country.Code),]
al <- al[order(al$Country.Code),]
common <- intersect(as.character(co2[[2]]), as.character(gdp[[2]]))
common <- intersect(common, as.character(hiv[[2]]))
common <- intersect(common, as.character(life[[2]]))
common <- intersect(common, as.character(ob[[2]]))
common <- intersect(common, as.character(pre[[2]]))
common <- intersect(common, as.character(sec[[2]]))
common <- intersect(common, as.character(pri[[2]]))
common <- intersect(common, as.character(sani[[2]]))
common <- intersect(common, as.character(smo[[2]]))
common <- intersect(common, as.character(ter[[2]]))
common <- intersect(common, as.character(smo[[2]]))
common <- intersect(common, as.character(ter[[2]]))
common <- intersect(common, as.character(al[[2]]))
x.9 <- al[al[[2]] %in% common, 3]
x.10 <- co2[co2[[2]] %in% common, 3]
x.1 <- gdp[gdp[[2]] %in% common, 3]
x.11 <- hiv[hiv[[2]] %in% common, 3]
y <- life[life[[2]] %in% common, ]
x.8 <- ob[ob[[2]] %in% common, 3]
x.3 <- pre[pre[[2]] %in% common, 3]
x.4 <- pri[pri[[2]] %in% common, 3]
x.2 <- sani[sani[[2]] %in% common, 3]
x.5 <- sec[sec[[2]] %in% common, 3]
x.7 <- smo[smo[[2]] %in% common, c(3, 4)]
x.6 <- ter[ter[[2]] %in% common, 3]
df <- cbind( y, gdp = x.1, sani = x.2, pre = x.3, pri = x.4, sec = x.5,
ter = x.6, smo = x.7, ob = x.8, al = x.9, co2 = x.10, hiv = x.11)
hiv1 <- read.csv("hiv.rm.csv", header = T)
hiv2 <- read.csv("hiv2.raw.data.csv", header=T)
merge(hiv1, hiv2)
hiv.new <- merge(hiv1, hiv2)
View(hiv.new)
hiv.new <- merge(hiv1, hiv2, by.x = c("Country Name","Country code"), by.y = c("Country name","Country code"))
hiv.new <- merge(hiv1, hiv2, by.x = "Country code", by.y ="Country code")
hiv.new <- merge(hiv1, hiv2, by.x = "Country Code", by.y ="Country code")
hiv.new <- merge(hiv1, hiv2, by.x = "Country Code", by.y ="Country code")
View(hiv1)
View(hiv2)
hiv.new <- merge(hiv1, hiv2, by.x = "Country.Code", by.y ="Country.code")
View(hiv.new)
common2 <- intersect(as.character(hiv1[[2]]), as.character(hiv2[[2]]))
View(hiv2)
hiv2[-common2]
hiv.3 <- hiv2[-common2,]
common2 <- intersect(as.character(hiv1[[2]]), as.character(hiv2[[2]]))
hiv.3 <- hiv2[-common2,]
which(hiv2[[2]]==common2)
which(as.character(hiv2[[2]])==common2)
hiv.3 <- hiv2[common2, ]
hiv.3 <- hiv2[-common2, ]
rownames(hiv.3)
View(hiv.3)
hiv1[common2, ]
common2
hiv1[common2]
hiv1[common2,]
hiv1.n <- hiv1[,c(1,2,18,19)]
View(hiv1.n)
hiv1.n <- hiv1[,c(1,18,19)]
hiv1.n <- hiv1[,c(2,18,19)]
View(hiv1.n)
View(hiv1)
merge(hiv1.n, hiv2, by="Country.Name", by.x = "Country.Code", by.y = "Country.code")
hiv.new <- merge(hiv1.n, hiv2, by="Country.Name", by.x = "Country.Code", by.y = "Country.code")
View(hiv.new)
hiv.new(,c(4,1,2,3,5:19))
hiv.new <- merge(hiv1.n, hiv2, by="Country.Name", by.x = "Country.Code", by.y = "Country.code")
hiv.new[,c(4,1,2,3,5:19)]
hiv.new <- hiv.new[,c(4,1,2,3,5:19)]
View(hiv.new)
hiv.new <- hiv.new[,c(4,1,5:19,2:3)]
View(hiv.new)
hiv.new <- merge(hiv1.n, hiv2, by="Country.Name", by.x = "Country.Code", by.y = "Country.code")
hiv.new <- hiv.new[,c(4,1,5:19,2:3)]
View(hiv.new)
