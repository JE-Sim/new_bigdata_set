se.beta <- sqrt(diag(cc))*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower, upper)
row.names(CI) <- c("b.0","b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
# test H0: beta1 = c.value1
c.value <- 0
t.stat <- (beta - c.value) / se.beta
print(t.stat)
p.value <- 2 * (1 - pt(abs(t.stat), n - p - 1))
round(p.value,4)
# inference about q * beta
q <- c(0, 1, 1, 1, 1, 1, 1)
q.beta <- t(q) %*% beta
# confidence interval
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(t(q) %*% cc %*% q) * sigma
moe <- t.alpha * se.beta
c(q.beta - moe, q.beta + moe)
# test H0: q^T beta = c
c.value <- 3
q0 <- c(0,0,0,1,1,0,0)
se.beta0 <- sqrt(t(q0) %*% cc %*% q0) * sigma
q.beta <- t(q0)%*%beta
t.stat <- (q.beta - c.value) / se.beta0
print(t.stat)
p.value <- 2 * (1 - pt(t.stat, n - p - 1))
print(p.value)
round(CI,2)
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
t.alpha
se.beta <- sqrt(diag(cc))*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower, upper)
row.names(CI) <- c("b.0","b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
round(CI[-1],2)
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower[-1], upper[-1])
row.names(CI) <- c("b.0","b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
CI <- cbind(lower[-1], upper[-1])
row.names(CI) <- c("b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
qt(0.05/2, n-p-1)
t.alpha
se.beta
diag(cc[-1])
diag(cc)[-1]
se.beta <- sqrt(diag(cc)[-1])*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(diag(cc)[-1])*as.vector(sigma)
moe <- t.alpha*se.beta
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(diag(cc))*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower[-1], upper[-1])
row.names(CI) <- c("b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
# confidence interval
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(diag(cc))*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower[-1], upper[-1])
row.names(CI) <- c("b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
library(ISLR)
data("Hitters")
Hitters <- na.omit(Hitters)
n <- nrow(Hitters) #number of observations
#response : Salary of Baseball Player
y <- Hitters$Salary
# predictors : Player Stats
x1 <- Hitters$AtBat #number of times at batting in the game
x2 <- Hitters$Hits # number of hits
x3 <- Hitters$HmRun #number of homeruns
x4 <- Hitters$Runs #number of runs
x5 <- Hitters$Walks #number of Walks
x6 <- Hitters$Years #number of years played in the league
#combine predictors
x <- cbind(x1, x2, x3, x4, x5, x6)
p <- ncol(x)
#X matrix
X <- cbind(rep(1, n), x)
n <- nrow(X)
lm(y ~ x)
#estimate of regression coefficients and error variance
cc <- solve(t(X) %*% X)
beta <- cc%*%t(X)%*%y
r <- y - X %*% beta
print(round(beta,2))
SST <- t(y - mean(y)) %*% (y - mean(y))
SSE <- t(r) %*% r
MSE <- SSE/(n - p - 1)
sigma <- sqrt(MSE)
print(sigma)
# global test
SSR <- t(X %*% beta - mean(y)) %*% (X %*% beta - mean(y))
MSR <- SSR/p
F.stat <- SSR/(p * MSE)
print(F.stat)
df <- c(p,n-p-1,n-1)
SS <- rbind(SSR,SSE,SST)
MS <- rbind(MSR, MSE, "")
F.stat <-rbind(F.stat, "", "")
Anova <-data.frame(df,SS,MS,F.stat)
row.names(Anova) <- c("Model","Error","Total")
Anova
# confidence interval
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(diag(cc))*as.vector(sigma)
moe <- t.alpha*se.beta
lower <- beta - moe
upper <- beta + moe
CI <- cbind(lower[-1], upper[-1])
row.names(CI) <- c("b.1","b.2","b.3","b.4","b.5","b.6")
colnames(CI) <- c("lower", "upper")
round(CI,2)
# test H0: beta1 = c.value1
c.value <- 0
t.stat <- (beta - c.value) / se.beta
print(t.stat)
p.value <- 2 * (1 - pt(abs(t.stat), n - p - 1))
round(p.value,4)
# inference about q * beta
q <- c(0, 1, 1, 1, 1, 1, 1)
q.beta <- t(q) %*% beta
# confidence interval
alpha <- 0.05
t.alpha <- qt(1-alpha/2, n - p - 1)
se.beta <- sqrt(t(q) %*% cc %*% q) * sigma
moe <- t.alpha * se.beta
c(q.beta - moe, q.beta + moe)
# test H0: q^T beta = c
c.value <- 3
q0 <- c(0,0,0,1,1,0,0)
se.beta0 <- sqrt(t(q0) %*% cc %*% q0) * sigma
q.beta <- t(q0)%*%beta
t.stat <- (q.beta - c.value) / se.beta0
print(t.stat)
p.value <- 2 * (1 - pt(t.stat, n - p - 1))
print(p.value)
MSE
set.seed(1)
n <- 100
x <- runif(n, 0, 1)
eps <- rnorm(n, 0, 1)
y <- 1 + x + x * eps
plot(x, y)
linear model
X1 <- cbind(rep(1, n), x)
beta1 <- solve(t(X1) %*% X1) %*% t(X1) %*% y
H1 <- X1 %*% solve(t(X1) %*% X1) %*% t(X1)
hat.y1 <- H1 %*% y
r1 <- (diag(n) - H1) %*% y
mse1 <- t(r1) %*% r1 / (n - 2)
e1 <- r1/c(sqrt(mse1))
plot(hat.y1, e1, main = "Linear",
xlab = "predicted values",
ylab = "standardized residuals")
abline(h = 0, col = 2, lty = 2)
# comare OLS vs WLS
n <- 100
X <- cbind(rep(1, n), x)
W <- diag(1/x)
n.sim <- 5000
beta.ols <- beta.wls <- matrix(0, n.sim, 2)
for (i in 1:n.sim)
{
set.seed(i)
eps <- rnorm(n, 0, 1)
y <- 1 + x + x * eps
beta.ols[i,] <- solve(t(X) %*% X) %*% t(X) %*% y
beta.wls[i,] <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y
}
par(mfrow = c(2,1))
for (i in 1:2){
hist(beta.ols[,i], main = paste("OLS vs WLS (beta", i, ")", sep = ''),
col = rgb(1,0,0, alpha = 0.2), border = F, breaks = 20)
hist(beta.wls[,i], add = T, , col = rgb(0,0,1, alpha = 0.2), border = F, breaks = 20)
abline(v = 1)
abline(v = mean(beta.ols[,i]), col = 2, lty = 2)
abline(v = mean(beta.wls[,i]), col = 4, lty = 2)
}
n <- 100
X <- cbind(rep(1, n), x)
W <- diag(1/x)
n.sim <- 5000 #모델에서 베타 뽑아서 OLS 1개 WLS 1개. 5000번 반복 후 분포.
beta.ols <- beta.wls <- matrix(0, n.sim, 2)
for (i in 1:n.sim)
{
set.seed(i)
eps <- rnorm(n, 0, 1)
y <- 1 + x + x * eps
beta.ols[i,] <- solve(t(X) %*% X) %*% t(X) %*% y #ordinary least squre
beta.wls[i,] <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y #weighted least square => general version of ordinary least square
}
#in practice, we don't know W. simulation, we know this ther is proprtional to x.
par(mfrow = c(2,1))
for (i in 1:2){
hist(beta.ols[,i], main = paste("OLS vs WLS (beta", i, ")", sep = ''),
col = rgb(1,0,0, alpha = 0.2), border = F, breaks = 20)
hist(beta.wls[,i], add = T, , col = rgb(0,0,1, alpha = 0.2), border = F, breaks = 20)
abline(v = 1)
abline(v = mean(beta.ols[,i]), col = 2, lty = 2)
abline(v = mean(beta.wls[,i]), col = 4, lty = 2)
}
library(lmtest)
install.packages("lmtest")
library(lmtest)
set.seed(1)
n <- 200
x <- rnorm(n)
eps <- rnorm(n, 0., 0.2)
y <- 1 + x + eps
X <- cbind(rep(1, n), x)
H <- X %*% solve(t(X) %*% X) %*% t(X)
# fit regression
hat.y <- H %*% y
r <- (diag(n) - H) %*% y
mse <- t(r) %*% r / (n - 2)
e <- r/c(sqrt(mse))
# index plot for residual
plot(e, xlab = "index", ylab = "residual")
abline(h = 0, col = 2, lty = 2)
dwtest(y ~ x)
dwtest(y ~ x)
ar.eps <- filter(eps, 0.9, method="recursive")
print(cor(ar.eps[1:199], ar.eps[2:200]))
y.ar <- 1 + x + ar.eps
y.ar <- 1 + x + ar.eps #correlated response, same mean model and different correlated error term
hat.y.ar <- H %*% y.ar
r.ar <- (diag(n) - H) %*% y.ar
mse.ar <- t(r.ar) %*% r.ar / (n - 2)
e.ar <- r.ar/c(sqrt(mse.ar))
plot(e.ar, xlab = "index", ylab = "residual")
abline(h = 0, col = 2, lty = 2)
dwtest(y.ar ~ x)
par(mfrow = c(2,2))
y1 <- rnorm(200)
qqnorm(y1)
qqline(y1, col = 2)
y2 <- rt(200, 3)
qqnorm(y2)
qqline(y2, col = 2)
y3 <- runif(200)
qqnorm(y3)
qqline(y3, col = 2)
y4 <- rchisq(200, 3)
qqnorm(y4)
qqline(y4, col = 2)
set.seed(1)
n <- 200
x <- rnorm(n)
eps <- rnorm(n) # normal
y <- 1 + x + eps
X <- cbind(rep(1, n), x)
H <- X %*% solve(t(X) %*% X) %*% t(X)
hat.y <- H %*% y
r <- (diag(n) - H) %*% y
mse <- t(r) %*% r / (n - 2)
e <- r/c(sqrt(mse))
par(mfrow = c(1,1))
qqnorm(e)
qqline(e, col = 2)
eps <- rt(n, 3) # t(3)
y <- 1 + x + eps
X <- cbind(rep(1, n), x)
H <- X %*% solve(t(X) %*% X) %*% t(X)
# fit regression
hat.y <- H %*% y
r <- (diag(n) - H) %*% y
mse <- t(r) %*% r / (n - 2)
e <- r/c(sqrt(mse))
par(mfrow = c(1,1))
qqnorm(e)
qqline(e, col = 2)
obj <- lm(y~x)
plot(obj)
setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/above 2000")
co2 <- read.csv("co2.rv.csv")
gdp <- read.csv("gdp.rv.csv")
hiv <- read.csv("hiv.rv.csv")
life <- read.csv("life.rv.csv")
ob <- read.csv("ob.rv.csv")
pre <- read.csv("pre.rv.csv")
pri <- read.csv("pri.rv.csv")
sani <- read.csv("sani.rv.csv")
sec <- read.csv("sec.rv.csv")
smo <- read.csv("smo.rv.csv")
ter <- read.csv("ter.rv.csv")
al <- read.csv("al.rv.csv")
co2 <- co2[order(co2$Country.Code),]
gdp <- gdp[order(gdp$Country.Code),]
hiv <- hiv[order(hiv$Country.Code),]
life <- life[order(life$Country.Code),]
ob <- ob[order(ob$Country.Code),]
pre <- pre[order(pre$Country.Code),]
pri <- pri[order(pri$Country.Code),]
sani <- sani[order(sani$Country.Code),]
sec <- sec[order(sec$Country.Code),]
smo <- smo[order(smo$Country.Code),]
ter <- ter[order(ter$Country.Code),]
al <- al[order(al$Country.Code),]
###########################################
common <- intersect(as.character(co2[[2]]), as.character(gdp[[2]]))
common <- intersect(common, as.character(hiv[[2]]))
common <- intersect(common, as.character(life[[2]]))
common <- intersect(common, as.character(ob[[2]]))
common <- intersect(common, as.character(pre[[2]]))
common <- intersect(common, as.character(pri[[2]]))
common <- intersect(common, as.character(sec[[2]]))
common <- intersect(common, as.character(sani[[2]]))
common <- intersect(common, as.character(smo[[2]]))
common <- intersect(common, as.character(ter[[2]]))
common <- intersect(common, as.character(al[[2]]))
x.9 <- al[al[[2]] %in% common, 3]
x.10 <- co2[co2[[2]] %in% common, 3]
x.1 <- gdp[gdp[[2]] %in% common, 3]
x.11 <- hiv[hiv[[2]] %in% common, 3]
y <- life[life[[2]] %in% common, ]
x.8 <- ob[ob[[2]] %in% common, 3]
x.3 <- pre[pre[[2]] %in% common, 3]
x.4 <- pri[pri[[2]] %in% common, 3]
x.2 <- sani[sani[[2]] %in% common, 3]
x.5 <- sec[sec[[2]] %in% common, 3]
x.7 <- smo[smo[[2]] %in% common, c(3, 4)]
x.6 <- ter[ter[[2]] %in% common, 3]
df <- cbind( y, gdp = x.1, sani = x.2, pre = x.3, pri = x.4, sec = x.5,
ter = x.6, smo = x.7, ob = x.8, al = x.9, co2 = x.10, hiv = x.11)
write.csv(df, "final.csv", row.names = F)
setwd("c:/Users/정은/Desktop/new_bigdata_set/Final Total Data")
df <- read.csv("Sleeping princess in penguin room.csv")
life <- df[[3]]
gdp <- df[[4]]; sani <- df[[5]]; pre <- df[[6]]; pri <- df[[7]]
sec <- df[[8]]; ter <- df[[9]]; smo <- df[[11]]; ob <- df[[12]]
al <- df[[13]]; co2 <- df[[14]]; hiv <- df[[15]]
reg <- lm(life~gdp+sani+pre+pri+sec+ter+smo+ob+al+co2+hiv)
summary(reg)
par(mfrow=c(1,1))
plot(reg$residuals, type = "n", main = "residual plot", ylab = "residuals"); abline(h=0, lty="dotted")
text(reg$residuals, names(reg$residuals), cex = 0.7)
plot(reg$fitted.values, reg$residuals, type = "n", main = "residual plot", xlab = "y.hat", ylab = "residuals")
abline(h = 0, lty = "dotted")
text(reg$fitted.values, reg$residuals, names(reg$fitted.values), cex = 0.7)
df1 <- df[,-c(1, 2, 10)]
par(mfrow = c(3, 4))
list.obj <- list()
j <- 2L
for (j in 2:13){
obj <- lm(life ~ df1[,j])
plot(df1[,j], life, xlab=colnames(df1)[j], main=paste("x", j))
abline(obj, col = "red")
}
for (j in 2:13){
obj <- lm(life ~ df1[,j])
list.obj[j-1] <- obj
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x,ux)))]
}
# gdp 로그변환, sani, pre, smo, ob(two group), al, co2 로그 변환, hiv 로그 변환
df2 <- cbind(log(gdp, 10), sani, pre, smo, al, log(co2, 2), log(hiv, 2))
colnames(df2) <- c("log.gdp", "sani", "pre", "smo", "al", "log.co2", "log.hiv")
par(mfrow = c(3, 3))
for (j in c(1:7)){
plot(df2[,j], life, color=c("white","gray"), xlab=colnames(df2)[j], main=paste("x", j))
}
answer <- NULL
for (j in c(1:7)){
answer <- c(answer, cor(life, df2[,j]))
}
answer
plot(smo ~ ob)
plot(log(gdp, 10) ~ ob)
plot(al ~ ob)
setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/final_hiv_evised")
setwd("C:/Users/양수형/Documents/GitHub/new_bigdata_set/final_hiv_revised")
co2 <- read.csv("co2.rv.csv")
gdp <- read.csv("gdp.rv.csv")
hiv <- read.csv("hiv.rv.csv")
life <- read.csv("life.rv.csv")
ob <- read.csv("ob.rv.csv")
pre <- read.csv("pre.rv.csv")
pri <- read.csv("pri.rv.csv")
sani <- read.csv("sani.rv.csv")
sec <- read.csv("sec.rv.csv")
smo <- read.csv("smo.rv.csv")
ter <- read.csv("ter.rv.csv")
al <- read.csv("al.rv.csv")
co2 <- co2[order(co2$Country.Code),]
gdp <- gdp[order(gdp$Country.Code),]
hiv <- hiv[order(hiv$Country.Code),]
life <- life[order(life$Country.Code),]
ob <- ob[order(ob$Country.Code),]
pre <- pre[order(pre$Country.Code),]
pri <- pri[order(pri$Country.Code),]
sani <- sani[order(sani$Country.Code),]
sec <- sec[order(sec$Country.Code),]
smo <- smo[order(smo$Country.Code),]
ter <- ter[order(ter$Country.Code),]
al <- al[order(al$Country.Code),]
###########################################
common <- intersect(as.character(co2[[2]]), as.character(gdp[[2]]))
common <- intersect(common, as.character(hiv[[2]]))
common <- intersect(common, as.character(life[[2]]))
common <- intersect(common, as.character(ob[[2]]))
common <- intersect(common, as.character(pre[[2]]))
common <- intersect(common, as.character(pri[[2]]))
common <- intersect(common, as.character(sec[[2]]))
common <- intersect(common, as.character(sani[[2]]))
common <- intersect(common, as.character(smo[[2]]))
common <- intersect(common, as.character(ter[[2]]))
common <- intersect(common, as.character(al[[2]]))
x.9 <- al[al[[2]] %in% common, 3]
x.10 <- co2[co2[[2]] %in% common, 3]
x.1 <- gdp[gdp[[2]] %in% common, 3]
x.11 <- hiv[hiv[[2]] %in% common, 3]
y <- life[life[[2]] %in% common, ]
x.8 <- ob[ob[[2]] %in% common, 3]
x.3 <- pre[pre[[2]] %in% common, 3]
x.4 <- pri[pri[[2]] %in% common, 3]
x.2 <- sani[sani[[2]] %in% common, 3]
x.5 <- sec[sec[[2]] %in% common, 3]
x.7 <- smo[smo[[2]] %in% common, c(3, 4)]
x.6 <- ter[ter[[2]] %in% common, 3]
df <- cbind( y, gdp = x.1, sani = x.2, pre = x.3, pri = x.4, sec = x.5,
ter = x.6, smo = x.7, ob = x.8, al = x.9, co2 = x.10, hiv = x.11)
write.csv(df, "final.csv", row.names = F)
setwd("c:/Users/정은/Desktop/new_bigdata_set/Final Total Data")
df <- read.csv("Sleeping princess in penguin room.csv")
life <- df[[3]]
gdp <- df[[4]]; sani <- df[[5]]; pre <- df[[6]]; pri <- df[[7]]
sec <- df[[8]]; ter <- df[[9]]; smo <- df[[11]]; ob <- df[[12]]
al <- df[[13]]; co2 <- df[[14]]; hiv <- df[[15]]
reg <- lm(life~gdp+sani+pre+pri+sec+ter+smo+ob+al+co2+hiv)
summary(reg)
df <- cbind( y, gdp = x.1, sani = x.2, pre = x.3, pri = x.4, sec = x.5,
ter = x.6, smo = x.7, ob = x.8, al = x.9, co2 = x.10, hiv = x.11)
life <- df[[3]]
gdp <- df[[4]]; sani <- df[[5]]; pre <- df[[6]]; pri <- df[[7]]
sec <- df[[8]]; ter <- df[[9]]; smo <- df[[11]]; ob <- df[[12]]
al <- df[[13]]; co2 <- df[[14]]; hiv <- df[[15]]
reg <- lm(life~gdp+sani+pre+pri+sec+ter+smo+ob+al+co2+hiv)
summary(reg)
par(mfrow=c(1,1))
plot(reg$residuals, type = "n", main = "residual plot", ylab = "residuals"); abline(h=0, lty="dotted")
text(reg$residuals, names(reg$residuals), cex = 0.7)
par(mfrow=c(1,1))
plot(reg$residuals, type = "n", main = "residual plot", ylab = "residuals"); abline(h=0, lty="dotted")
text(reg$residuals, names(reg$residuals), cex = 0.7)
plot(reg$fitted.values, reg$residuals, type = "n", main = "residual plot", xlab = "y.hat", ylab = "residuals")
abline(h = 0, lty = "dotted")
text(reg$fitted.values, reg$residuals, names(reg$fitted.values), cex = 0.7)
df1 <- df[,-c(1, 2, 10)]
par(mfrow = c(3, 4))
list.obj <- list()
j <- 2L
for (j in 2:13){
obj <- lm(life ~ df1[,j])
plot(df1[,j], life, xlab=colnames(df1)[j], main=paste("x", j))
abline(obj, col = "red")
}
for (j in 2:13){
obj <- lm(life ~ df1[,j])
list.obj[j-1] <- obj
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x,ux)))]
}
df2 <- cbind(log(gdp, 10), sani, pre, smo, al, log(co2, 2), log(hiv, 2))
colnames(df2) <- c("log.gdp", "sani", "pre", "smo", "al", "log.co2", "log.hiv")
par(mfrow = c(3, 3))
for (j in c(1:7)){
plot(df2[,j], life, color=c("white","gray"), xlab=colnames(df2)[j], main=paste("x", j))
}
answer <- NULL
for (j in c(1:7)){
answer <- c(answer, cor(life, df2[,j]))
}
answer
plot(smo ~ ob)
plot(log(gdp, 10) ~ ob)
plot(al ~ ob)
hiv1 <- read.csv("hiv.rm.csv", header = T)
hiv2 <- read.csv("hiv2.raw.data.csv", header=T)
View(hiv2)
